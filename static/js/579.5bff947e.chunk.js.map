{"version":3,"file":"static/js/579.5bff947e.chunk.js","mappings":"0LAiEA,UA9DmB,WACjB,OAAoCA,EAAAA,EAAAA,UAAS,MAAK,eAA3CC,EAAU,KAAEC,EAAa,KAChC,GAAwBF,EAAAA,EAAAA,UAAS,MAAK,eAA/BG,EAAI,KAAEC,EAAO,MAUpBC,EAAAA,EAAAA,YAAU,WACRD,EAROE,MAAM,8CAEVC,MAAK,SAACC,GAAQ,OAAKA,EAASC,MAAM,IAClCF,MAAK,SAACJ,GAAI,OAAKO,QAAQC,IAAIR,EAAK,IAChCS,OAAM,SAACC,GAAK,OAAKH,QAAQG,MAAMA,EAAM,IAK1C,GAAG,IAEH,IADA,IAAMC,EAAsB,GACnBC,EAAI,EAAGA,GAAQ,OAAJZ,QAAI,IAAJA,OAAI,EAAJA,EAAMa,QAAQD,IAAK,CACrC,IAAME,EAAWd,EAAKY,GACtBD,EAAoBI,MAAK,UACpBD,GAEP,CACA,IAAME,EAAOlB,GAA0Ba,EAEjCM,GAAaC,EAAAA,EAAAA,cACjB,SAACC,EAAOC,GAAS,OAAKrB,EA4BxB,SAAsBiB,EAAMG,EAAOC,GACjC,OAAO,OAAIJ,GAAMK,MAAK,SAACC,EAAMC,GAC3B,IAAMC,EAAUC,WAAWH,EAAKH,GAAOO,UAAU,IAC3CC,EAAUF,WAAWF,EAAKJ,GAAOO,UAAU,IAEjD,MAAqB,eAAdN,EAA6BO,EAAUH,EAAUA,EAAUG,CACpE,GACF,CAnCsCC,CAAaZ,EAAMG,EAAOC,GAAW,GACzE,CAACJ,IAEH,OACE,SAAC,IAAI,CAACa,MAAM,mBAAkB,UAC5B,SAAC,IAAI,WACH,SAAC,IAAS,CACRC,mBAAoB,CAClB,SACA,SACA,UAEFC,SAAU,CACR,KACA,KACA,SAEFf,KAAMA,EACNgB,OAAQ,CAAC,GAAI,GAAI,GAAI,IAAK,eAC1BC,SAAU,EAAC,GAAO,GAAM,GACxBC,qBAAqB,aACrBC,uBAAwB,EACxBC,OAAQnB,OAclB,C","sources":["views/management/index.js"],"sourcesContent":["import { Card, DataTable, Layout, Page } from '@shopify/polaris';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\n\r\nconst Management = () => {\r\n  const [sortedRows, setSortedRows] = useState(null);\r\n  const [data, setData] = useState(null);\r\n  const fetchData = () => {\r\n    // Where we're fetching data from\r\n    return fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n      // We get the API response and receive data in JSON format\r\n      .then((response) => response.json())\r\n      .then((data) => console.log(data))\r\n      .catch((error) => console.error(error));\r\n  }\r\n\r\n  useEffect(() => {\r\n    setData(fetchData());\r\n  }, []);\r\n  const initiallySortedRows = [];\r\n  for (let i = 0; i < data?.length; i++) {\r\n    const dataList = data[i];\r\n    initiallySortedRows.push({\r\n      ...dataList\r\n    })\r\n  };\r\n  const rows = sortedRows ? sortedRows : initiallySortedRows;\r\n\r\n  const handleSort = useCallback(\r\n    (index, direction) => setSortedRows(sortCurrency(rows, index, direction)),\r\n    [rows],\r\n  );\r\n  return (\r\n    <Page title=\"Sales by product\">\r\n      <Card>\r\n        <DataTable\r\n          columnContentTypes={[\r\n            'number',\r\n            'number',\r\n            'string',\r\n          ]}\r\n          headings={[\r\n            'No',\r\n            'Id',\r\n            'Title',\r\n          ]}\r\n          rows={rows}\r\n          totals={['', '', '', 255, '$155,830.00']}\r\n          sortable={[false, true, true]}\r\n          defaultSortDirection=\"descending\"\r\n          initialSortColumnIndex={4}\r\n          onSort={handleSort}\r\n        />\r\n      </Card>\r\n    </Page>\r\n  );\r\n\r\n  function sortCurrency(rows, index, direction) {\r\n    return [...rows].sort((rowA, rowB) => {\r\n      const amountA = parseFloat(rowA[index].substring(1));\r\n      const amountB = parseFloat(rowB[index].substring(1));\r\n\r\n      return direction === 'descending' ? amountB - amountA : amountA - amountB;\r\n    });\r\n  }\r\n}\r\nexport default Management;"],"names":["useState","sortedRows","setSortedRows","data","setData","useEffect","fetch","then","response","json","console","log","catch","error","initiallySortedRows","i","length","dataList","push","rows","handleSort","useCallback","index","direction","sort","rowA","rowB","amountA","parseFloat","substring","amountB","sortCurrency","title","columnContentTypes","headings","totals","sortable","defaultSortDirection","initialSortColumnIndex","onSort"],"sourceRoot":""}